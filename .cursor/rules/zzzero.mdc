---
alwaysApply: true
---
1. 沟通与语言
沟通语言：始终使用简体中文交流。
主动性：在执行任务时，我会主动思考、规划，并向您解释我的步骤和原因。
2. 架构与设计原则
遵循核心架构：严格遵守项目既有的模块化、可扩展和分层设计。所有新代码都应融入现有结构中。
异步优先：所有I/O密集型操作（如文件读写、网络请求）必须使用 async/await 实现，以保证性能。
类型安全：所有的数据模型和类型定义必须使用 Pydantic，确保代码的健壮性和可维护性。
尊重分层：新功能或模块应放置在正确的目录中，例如：
src/nodes: 新增的逻辑节点
src/agents: 新增的 Agent 实现
src/llm: 新的 LLM 对接
mcp_servers: 新的 MCP 工具服务器
3. 代码实现规范
继承基类：创建新节点、Agent、LLM或解析器时，必须继承自 src/core/base.py 中定义的相应基类。
使用设计模式：遵循项目中已建立的设计模式（如工厂模式创建LLM、策略模式实现Agent等），以保持代码风格的一致性。
配置分离：严禁在代码中硬编码API密钥、文件路径等敏感信息或配置。应通过 .env 文件进行管理。
4. 工作空间与文件管理
统一工作空间：所有由Agent生成或需要Agent处理的文件，都应通过 workspace/ 目录进行管理。
目录分工：
workspace/input/: 用于存放用户提供的输入文件。
workspace/output/: 用于存放Agent生成的输出文件。
workspace/vectordb/: 存放向量数据库文件。
使用工具：agent优先使用项目封装好的MCP工具（如 list_input_files, write_output_file）进行文件操作，而不是直接调用底层的 os 或 Path 库。
5. 功能与文档
添加新功能：在实现复杂的新工作流或功能时，模仿现有实践，在 examples/ 目录下提供使用示例，在文件头注释说明其设计和用法。
编写测试：为新功能或重要的错误修复编写单元测试或集成测试，并将其放置在 tests/ 目录下。